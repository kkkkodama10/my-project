from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model import Model
from server import util


class CreateComment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, content=None):  # noqa: E501
        """CreateComment - a model defined in OpenAPI

        :param user_id: The user_id of this CreateComment.  # noqa: E501
        :type user_id: int
        :param content: The content of this CreateComment.  # noqa: E501
        :type content: str
        """
        self.openapi_types = {
            'user_id': int,
            'content': str
        }

        self.attribute_map = {
            'user_id': 'userId',
            'content': 'content'
        }

        self._user_id = user_id
        self._content = content

    @classmethod
    def from_dict(cls, dikt) -> 'CreateComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateComment of this CreateComment.  # noqa: E501
        :rtype: CreateComment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> int:
        """Gets the user_id of this CreateComment.


        :return: The user_id of this CreateComment.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this CreateComment.


        :param user_id: The user_id of this CreateComment.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def content(self) -> str:
        """Gets the content of this CreateComment.


        :return: The content of this CreateComment.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this CreateComment.


        :param content: The content of this CreateComment.
        :type content: str
        """

        self._content = content
