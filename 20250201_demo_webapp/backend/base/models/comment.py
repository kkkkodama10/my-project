from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from base.models.base_model import Model
from base import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, post_id=None, user_id=None, content=None, created_at=None):  # noqa: E501
        """Comment - a model defined in OpenAPI

        :param id: The id of this Comment.  # noqa: E501
        :type id: int
        :param post_id: The post_id of this Comment.  # noqa: E501
        :type post_id: int
        :param user_id: The user_id of this Comment.  # noqa: E501
        :type user_id: int
        :param content: The content of this Comment.  # noqa: E501
        :type content: str
        :param created_at: The created_at of this Comment.  # noqa: E501
        :type created_at: datetime
        """
        self.openapi_types = {
            'id': int,
            'post_id': int,
            'user_id': int,
            'content': str,
            'created_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'post_id': 'postId',
            'user_id': 'userId',
            'content': 'content',
            'created_at': 'createdAt'
        }

        self._id = id
        self._post_id = post_id
        self._user_id = user_id
        self._content = content
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Comment of this Comment.  # noqa: E501
        :rtype: Comment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Comment.


        :return: The id of this Comment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Comment.


        :param id: The id of this Comment.
        :type id: int
        """

        self._id = id

    @property
    def post_id(self) -> int:
        """Gets the post_id of this Comment.


        :return: The post_id of this Comment.
        :rtype: int
        """
        return self._post_id

    @post_id.setter
    def post_id(self, post_id: int):
        """Sets the post_id of this Comment.


        :param post_id: The post_id of this Comment.
        :type post_id: int
        """

        self._post_id = post_id

    @property
    def user_id(self) -> int:
        """Gets the user_id of this Comment.


        :return: The user_id of this Comment.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this Comment.


        :param user_id: The user_id of this Comment.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def content(self) -> str:
        """Gets the content of this Comment.


        :return: The content of this Comment.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this Comment.


        :param content: The content of this Comment.
        :type content: str
        """

        self._content = content

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Comment.


        :return: The created_at of this Comment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Comment.


        :param created_at: The created_at of this Comment.
        :type created_at: datetime
        """

        self._created_at = created_at
